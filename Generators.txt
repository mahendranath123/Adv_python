Generators:

Generator function allows you to declare a function that behaves like an iterator, providing a faster and easier way to create iterators. They can be used on an abstract container of data to turn it into an iterable object like lists, dictionaries and strings.

# a=[i for i in range(0,99)]
	#print(a)
a=(i for i in range(0,99)) #generator object created
for item in a:
    print(item)

Generator Expression Syntax
The generator expression in Python has the following Syntax:

(expression for item in iterable)
Example:

In this example, we will create a generator object that will print the multiples of 5 between the range of 0 to 5 which are also divisible by 2.

   
# generator expression 
generator_exp = (i * 5 for i in range(5) if i%2==0) 
  
for i in generator_exp: 
    print(i)

Applications of Generators in Python 
Suppose we create a stream of Fibonacci numbers, adopting the generator approach makes it trivial; we just have to call next(x) to get the next Fibonacci number without bothering about where or when the stream of numbers ends. A more practical type of stream processing is handling large data files such as log files. Generators provide a space-efficient method for such data processing as only parts of the file are handled at one given point in time. We can also use Iterators for these purposes, but Generator provides a quick way (We donâ€™t need to write __next__ and __iter__ methods here).

In this example, we will create two generators for Fibonacci Numbers, first a simple generator and second generator using a for loop.

# A simple generator for Fibonacci Numbers 
def fib(limit): 
	
	# Initialize first two Fibonacci Numbers 
	a, b = 0, 1

	# One by one yield next Fibonacci Number 
	while a < limit: 
		yield a 
		a, b = b, a + b 

# Create a generator object 
x = fib(5) 

# Iterating over the generator object using next 
# In Python 3, __next__() 
print(next(x)) 
print(next(x)) 
print(next(x)) 
print(next(x)) 
print(next(x)) 

# Iterating over the generator object using for 
# in loop. 
print("\nUsing for in loop") 
for i in fib(5): 
	print(i)

