NumPy Introduction

What is NumPy?
NumPy is a Python library used for working with arrays.

It also has functions for working in domain of linear algebra, fourier transform, and matrices.

NumPy was created in 2005 by Travis Oliphant. It is an open source project and you can use it freely.

NumPy stands for Numerical Python.

Why Use NumPy?
In Python we have lists that serve the purpose of arrays, but they are slow to process.

NumPy aims to provide an array object that is up to 50x faster than traditional Python lists.

The array object in NumPy is called ndarray, it provides a lot of supporting functions that make working with ndarray very easy.

Arrays are very frequently used in data science, where speed and resources are very important.

Data Science: is a branch of computer science where we study how to store, use and analyze data for deriving information from it.

Why is NumPy Faster Than Lists?
NumPy arrays are stored at one continuous place in memory unlike lists, so processes can access and manipulate them very efficiently.

This behavior is called locality of reference in computer science.

This is the main reason why NumPy is faster than lists. Also it is optimized to work with latest CPU architectures.

Which Language is NumPy written in?
NumPy is a Python library and is written partially in Python, but most of the parts that require fast computation are written in C or C++.


Python Pandas 

Discussion
Pandas is an open-source, BSD-licensed Python library providing high-performance, easy-to-use data structures and data analysis tools for the Python programming language. This Pandas tutorial has been prepared for those who want to learn about the foundations and advanced features of the Pandas Python package. Python with Pandas is used in a wide range of fields including academic and commercial domains including finance, economics, Statistics, analytics, etc. 

What is Pandas?
Pandas is a powerful Python library that is specifically designed to work on data frames that have "relational" or "labeled" data. Its aim aligns with doing real-world data analysis using Python. Its flexibility and functionality make it indispensable for various data-related tasks. Hence, this Python package works well for data manipulation, operating a dataset, exploring a data frame, data analysis, and machine learning-related tasks. To work on it we should first install it using a pip command like "pip install pandas" and then import it like "import pandas as pd". After successfully installing and importing, we can enjoy the innovative functions of pandas to work on datasets or data frames. Pandas versatility and ease of use make it a go-to tool for working with structured data in Python.

Generally, Pandas operates a data frame using Series and DataFrame; where Series works on a one-dimensional labeled array holding data of any type like integers, strings, and objects, while a DataFrame is a two-dimensional data structure that manages and operates data in tabular form (using rows and columns).


Why Pandas?
The beauty of Pandas is that it simplifies the task related to data frames and makes it simple to do many of the time-consuming, repetitive tasks involved in working with data frames, such as:

Import datasets - available in the form of spreadsheets, comma-separated values (CSV) files, and more.
Data cleansing - dealing with missing values and representing them as NaN, NA, or NaT.
Size mutability - columns can be added and removed from DataFrame and higher-dimensional objects.
Data normalization – normalize the data into a suitable format for analysis.
Data alignment - objects can be explicitly aligned to a set of labels.
Intuitive merging and joining data sets – we can merge and join datasets.
Reshaping and pivoting of datasets – datasets can be reshaped and pivoted as per the need.
Efficient manipulation and extraction - manipulation and extraction of specific parts of extensive datasets using intelligent label-based slicing, indexing, and subsetting techniques.
Statistical analysis - to perform statistical operations on datasets.
Data visualization - Visualize datasets and uncover insights.
Applications of Pandas

The most common applications of Pandas are as follows:

Data Cleaning: Pandas provides functionalities to clean messy data, deal with incomplete or inconsistent data, handle missing values, remove duplicates, and standardise formats to do effective data analysis.
Data Exploration: Pandas easily summarise statistics, find trends, and visualise data using built-in plotting functions, Matplotlib, or Seaborn integration.
Data Preparation: Pandas may pivot, melt, convert variables, and merge datasets based on common columns to prepare data for analysis.
Data Analysis: Pandas supports descriptive statistics, time series analysis, group-by operations, and custom functions.
Data Visualisation: Pandas itself has basic plotting capabilities; it integrates and supports data visualisation libraries like Matplotlib, Seaborn, and Plotly to create innovative visualisations.
Time Series Analysis: Pandas supports date/time indexing, resampling, frequency conversion, and rolling statistics for time series data.
Data Aggregation and Grouping: Pandas groupby() function lets you aggregate data and compute group-wise summary statistics or apply functions to groups.
Data Input/Output: Pandas makes data input and export easy by reading and writing CSV, Excel, JSON, SQL databases, and more.
Machine Learning: Pandas works well with Scikit-learn for data preparation, feature engineering, and model input data.
Web Scraping: Pandas may be used with BeautifulSoup or Scrapy to parse and analyse structured web data for web scraping and data extraction.
Financial Analysis: Pandas is commonly used in finance for stock market data analysis, financial indicator calculation, and portfolio optimisation.
Text Data Analysis: Pandas' string manipulation, regular expressions, and text mining functions help analyse textual data.
Experimental Data Analysis: Pandas makes manipulating and analysing large datasets, performing statistical tests, and visualising results easy.
